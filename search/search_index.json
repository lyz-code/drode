{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"drode is a wrapper over the Drone and AWS APIs to make deployments more user friendly. It assumes that the projects are configured to continuous deliver all commits to staging. Then those commits can be promoted to production or to staging for upgrades and rollbacks. It has the following features: Prevent failed jobs to be promoted to production. Promote jobs with less arguments than the drone command line. Wait for a drone build to end, then raise the terminal bell. Installing \u00b6 To install drode , simply: pip install drode drode configuration is done through the yaml file located at ~/.local/share/drode/config.yaml . The default template is provided at installation time. It is assumed that Drone environmental variables DRONE_SERVER and DRONE_TOKEN are configured as well as the AWS CLI credentials. Please refer to their documentation in case of doubt. To check if everything works as expected use drode verify : $: drode verify [ INFO ] Drode: 0 .1.0 [ INFO ] Drone: OK [ INFO ] AWS: OK A simple example \u00b6 Let's see drode in action. Imagine a push in main triggers a drone job. Drone jobs can take from seconds to dozens of minutes. Keeping a constant eye on the job status introduces several undesired context changes. You can use the wait subcommand to release your mind of that burden. It will periodically check the job status and rise the terminal bell once it's finished. You can specify a job number, It monitors the last job by default, but you can specify any job number. $: drode wait [ INFO ] Waiting for job #213 started by a promote event by lyz. # (... some time ...) [ INFO ] Job #213 has finished with status success Once the push job has finished successfully, we can promote it to the production environment. $: drode promote [ INFO ] You ' re about to promote job #213 of the project drode_website to production [ INFO ] With commit 347579b: Add drode promote documentation Are you sure? [ y/n ] : y [ INFO ] Job #214 has started. drode promote promotes to production the last successful job originated by a push event in main . You are given the information of the job and are prompted if you want to continue. Only y or yes will complete the deployment. Optionally you can specify which job number to deploy in which environment with something like drode promote 210 staging . With the -w flag, drode promote will launch the job and then wait for it to finish. If you try to promote a failed job, you'll get the following error: [ ERROR ] You can 't promote job #200 to production as it' s status is failure drode is also able to give insights of the instances related to a project. If you've configured the aws section of the project configuration, it will be shown after executing the status subcommand. $: drode status # Production Active LaunchConfiguration: production-project_1-238-32gosdkon3hlglkshonbllsdk32023950lskenbl Instance IP Status Created LaunchConfiguration ------------------- ----------- ----------------- ---------------- ----------------------------------- i-gasklk3bnl23880sl 192 .71.1.42 Healthy/InService 2020 -06-09T04:02 production-project_1-238-32gosdkon3h i-2osdkgh3nbbbl0sk3 192 .83.3.86 Healthy/InService 2020 -06-09T04:03 production-project_1-238-32gosdkon3h # Staging Active LaunchConfiguration: staging-icijweb-240-237e9e9fb759bab18cc52ad5b7c407e9975831d3 Instance IP Status Created LaunchConfiguration ------------------- ------------ ----------------- ---------------- ----------------------------------- i-32okgadslk3jos03l 192 .21.2.158 Healthy/InService 2020 -06-09T18:50 staging-project_1-238-32gosdkon3h Multiple projects support \u00b6 If you have more than one project configured, drode needs to know which one to act upon. Instead of defining it through command flags, we use the set command. drode set project_1 To check the active project use drode active . References \u00b6 As most open sourced programs, drode is standing on the shoulders of giants, namely: Pytest Testing framework, enhanced by the awesome pytest-cases library that made the parametrization of the tests a lovely experience. Mypy Python static type checker. Flakeheaven Python linter with lots of checks . Black Python formatter to keep a nice style without effort. Autoimport Python formatter to automatically fix wrong import statements. isort Python formatter to order the import statements. PDM Command line tool to manage the dependencies. Mkdocs To build this documentation site, with the Material theme . Safety To check the installed dependencies for known security vulnerabilities. Bandit To finds common security issues in Python code. Yamlfix YAML fixer. Contributing \u00b6 For guidance on setting up a development environment, and how to make a contribution to drode , see Contributing to drode .","title":"Drode"},{"location":"#installing","text":"To install drode , simply: pip install drode drode configuration is done through the yaml file located at ~/.local/share/drode/config.yaml . The default template is provided at installation time. It is assumed that Drone environmental variables DRONE_SERVER and DRONE_TOKEN are configured as well as the AWS CLI credentials. Please refer to their documentation in case of doubt. To check if everything works as expected use drode verify : $: drode verify [ INFO ] Drode: 0 .1.0 [ INFO ] Drone: OK [ INFO ] AWS: OK","title":"Installing"},{"location":"#a-simple-example","text":"Let's see drode in action. Imagine a push in main triggers a drone job. Drone jobs can take from seconds to dozens of minutes. Keeping a constant eye on the job status introduces several undesired context changes. You can use the wait subcommand to release your mind of that burden. It will periodically check the job status and rise the terminal bell once it's finished. You can specify a job number, It monitors the last job by default, but you can specify any job number. $: drode wait [ INFO ] Waiting for job #213 started by a promote event by lyz. # (... some time ...) [ INFO ] Job #213 has finished with status success Once the push job has finished successfully, we can promote it to the production environment. $: drode promote [ INFO ] You ' re about to promote job #213 of the project drode_website to production [ INFO ] With commit 347579b: Add drode promote documentation Are you sure? [ y/n ] : y [ INFO ] Job #214 has started. drode promote promotes to production the last successful job originated by a push event in main . You are given the information of the job and are prompted if you want to continue. Only y or yes will complete the deployment. Optionally you can specify which job number to deploy in which environment with something like drode promote 210 staging . With the -w flag, drode promote will launch the job and then wait for it to finish. If you try to promote a failed job, you'll get the following error: [ ERROR ] You can 't promote job #200 to production as it' s status is failure drode is also able to give insights of the instances related to a project. If you've configured the aws section of the project configuration, it will be shown after executing the status subcommand. $: drode status # Production Active LaunchConfiguration: production-project_1-238-32gosdkon3hlglkshonbllsdk32023950lskenbl Instance IP Status Created LaunchConfiguration ------------------- ----------- ----------------- ---------------- ----------------------------------- i-gasklk3bnl23880sl 192 .71.1.42 Healthy/InService 2020 -06-09T04:02 production-project_1-238-32gosdkon3h i-2osdkgh3nbbbl0sk3 192 .83.3.86 Healthy/InService 2020 -06-09T04:03 production-project_1-238-32gosdkon3h # Staging Active LaunchConfiguration: staging-icijweb-240-237e9e9fb759bab18cc52ad5b7c407e9975831d3 Instance IP Status Created LaunchConfiguration ------------------- ------------ ----------------- ---------------- ----------------------------------- i-32okgadslk3jos03l 192 .21.2.158 Healthy/InService 2020 -06-09T18:50 staging-project_1-238-32gosdkon3h","title":"A simple example"},{"location":"#multiple-projects-support","text":"If you have more than one project configured, drode needs to know which one to act upon. Instead of defining it through command flags, we use the set command. drode set project_1 To check the active project use drode active .","title":"Multiple projects support"},{"location":"#references","text":"As most open sourced programs, drode is standing on the shoulders of giants, namely: Pytest Testing framework, enhanced by the awesome pytest-cases library that made the parametrization of the tests a lovely experience. Mypy Python static type checker. Flakeheaven Python linter with lots of checks . Black Python formatter to keep a nice style without effort. Autoimport Python formatter to automatically fix wrong import statements. isort Python formatter to order the import statements. PDM Command line tool to manage the dependencies. Mkdocs To build this documentation site, with the Material theme . Safety To check the installed dependencies for known security vulnerabilities. Bandit To finds common security issues in Python code. Yamlfix YAML fixer.","title":"References"},{"location":"#contributing","text":"For guidance on setting up a development environment, and how to make a contribution to drode , see Contributing to drode .","title":"Contributing"},{"location":"contributing/","text":"So you've started using drode and want to show your gratitude to the project, depending on your programming skills there are different ways to do so. I don't know how to program \u00b6 There are several ways you can contribute: Open an issue if you encounter any bug or to let us know if you want a new feature to be implemented. Spread the word about the program. Review the documentation and try to improve it. I know how to program in Python \u00b6 If you have some python knowledge there are some additional ways to contribute. We've ordered the issues in milestones , check the issues in the smaller one, as it's where we'll be spending most of our efforts. Try the good first issues , as they are expected to be easier to get into the project. We develop the program with TDD , so we expect any contribution to have it's associated tests. We also try to maintain an updated documentation of the project, so think if your contribution needs to update it. We know that the expected code quality is above average. Therefore it might be changeling to get the initial grasp of the project structure, know how to make the tests, update the documentation or use all the project technology stack. but please don't let this fact discourage you from contributing: If you want to develop a new feature, explain how you'd like to do it in the related issue. If you don't know how to test your code, do the pull request without the tests and we'll try to do them for you. Issues \u00b6 Questions, feature requests and bug reports are all welcome as issues. To report a security vulnerability, please see our security policy instead. To make it as simple as possible for us to help you, please include the output of the following call in your issue: python -c \"import drode.version; print(drode.version.version_info())\" or if you have make installed, you can use make version . Please try to always include the above unless you're unable to install drode or know it's not relevant to your question or feature request. Pull Requests \u00b6 drode is released regularly so you should see your improvements release in a matter of days or weeks. Note Unless your change is trivial (typo, docs tweak etc.), please create an issue to discuss the change before creating a pull request. If you're looking for something to get your teeth into, check out the \"help wanted\" label on github. Development facilities \u00b6 To make contributing as easy and fast as possible, you'll want to run tests and linting locally. tl;dr : use make format to fix formatting, make to run tests and linting & make docs to build the docs. You'll need to have python 3.6, 3.7, or 3.8, virtualenv, git, and make installed. Clone your fork and go into the repository directory: git clone git@github.com:<your username>/drode.git cd drode Set up the virtualenv for running tests: virtualenv -p ` which python3.7 ` env source env/bin/activate Install drode, dependencies and configure the pre-commits: make install Checkout a new branch and make your changes: git checkout -b my-new-feature-branch Fix formatting and imports: drode uses black to enforce formatting and isort to fix imports. make format Run tests and linting: make There are more sub-commands in Makefile like test-code , test-examples , mypy or security which you might want to use, but generally make should be all you need. If you need to pass specific arguments to pytest use the ARGS variable, for example make test ARGs='-k test_markdownlint_passes' . Build documentation: If you have changed the documentation, make sure it builds the static site. Once built it will serve the documentation at localhost:8000 : make docs Commit, push, and create your pull request. Make a new release: To generate the changelog of the new changes, build the package, upload to pypi and clean the build files use make bump . We'd love you to contribute to drode !","title":"Contributing"},{"location":"contributing/#i-dont-know-how-to-program","text":"There are several ways you can contribute: Open an issue if you encounter any bug or to let us know if you want a new feature to be implemented. Spread the word about the program. Review the documentation and try to improve it.","title":"I don't know how to program"},{"location":"contributing/#i-know-how-to-program-in-python","text":"If you have some python knowledge there are some additional ways to contribute. We've ordered the issues in milestones , check the issues in the smaller one, as it's where we'll be spending most of our efforts. Try the good first issues , as they are expected to be easier to get into the project. We develop the program with TDD , so we expect any contribution to have it's associated tests. We also try to maintain an updated documentation of the project, so think if your contribution needs to update it. We know that the expected code quality is above average. Therefore it might be changeling to get the initial grasp of the project structure, know how to make the tests, update the documentation or use all the project technology stack. but please don't let this fact discourage you from contributing: If you want to develop a new feature, explain how you'd like to do it in the related issue. If you don't know how to test your code, do the pull request without the tests and we'll try to do them for you.","title":"I know how to program in Python"},{"location":"contributing/#issues","text":"Questions, feature requests and bug reports are all welcome as issues. To report a security vulnerability, please see our security policy instead. To make it as simple as possible for us to help you, please include the output of the following call in your issue: python -c \"import drode.version; print(drode.version.version_info())\" or if you have make installed, you can use make version . Please try to always include the above unless you're unable to install drode or know it's not relevant to your question or feature request.","title":"Issues"},{"location":"contributing/#pull-requests","text":"drode is released regularly so you should see your improvements release in a matter of days or weeks. Note Unless your change is trivial (typo, docs tweak etc.), please create an issue to discuss the change before creating a pull request. If you're looking for something to get your teeth into, check out the \"help wanted\" label on github.","title":"Pull Requests"},{"location":"contributing/#development-facilities","text":"To make contributing as easy and fast as possible, you'll want to run tests and linting locally. tl;dr : use make format to fix formatting, make to run tests and linting & make docs to build the docs. You'll need to have python 3.6, 3.7, or 3.8, virtualenv, git, and make installed. Clone your fork and go into the repository directory: git clone git@github.com:<your username>/drode.git cd drode Set up the virtualenv for running tests: virtualenv -p ` which python3.7 ` env source env/bin/activate Install drode, dependencies and configure the pre-commits: make install Checkout a new branch and make your changes: git checkout -b my-new-feature-branch Fix formatting and imports: drode uses black to enforce formatting and isort to fix imports. make format Run tests and linting: make There are more sub-commands in Makefile like test-code , test-examples , mypy or security which you might want to use, but generally make should be all you need. If you need to pass specific arguments to pytest use the ARGS variable, for example make test ARGs='-k test_markdownlint_passes' . Build documentation: If you have changed the documentation, make sure it builds the static site. Once built it will serve the documentation at localhost:8000 : make docs Commit, push, and create your pull request. Make a new release: To generate the changelog of the new changes, build the package, upload to pypi and clean the build files use make bump . We'd love you to contribute to drode !","title":"Development facilities"},{"location":"reference/","text":"drode special \u00b6 Wrapper over the Drone and AWS APIs to make deployments more user friendly. adapters special \u00b6 Expose the different adapters. aws \u00b6 Gather the integration with the AWS boto library. AWS \u00b6 AWS adapter. Source code in drode/adapters/aws.py class AWS : \"\"\"AWS adapter.\"\"\" @staticmethod def check_configuration () -> None : \"\"\"Check if the client is able to interact with the AWS server. Makes sure that the AWS is correctly configured. Raises: AWSConfigurationError: if any of the checks fail. \"\"\" try : ec2 = boto3 . client ( \"ec2\" ) ec2 . describe_regions () except ( NoRegionError , ClientError ) as error : log . error ( \"AWS: KO\" ) raise AWSConfigurationError ( error ) from error log . info ( \"AWS: OK\" ) @staticmethod def get_autoscaling_group ( autoscaling_name : str ) -> AutoscalerInfo : \"\"\"Get information of the autoscaling group and associated resources. Args: autoscaling_name: Autoscaling group name Returns: autoscaler_info: Dictionary with the following schema: 'template': srt = LaunchConfiguration or LaunchTemplate:LaunchTemplateVersion 'instances': List[InstanceInfo] = List of instance dictionaries with the following structure: 'Instance': str 'IP': str 'Status': str = Health status data in format 'f{HealthStatus}/{LifecycleState}' 'Created': str 'Template': str = LaunchConfiguration or LaunchTemplate:LaunchTemplateVersion that generated the instance. Raises: AWSStateError: If no autoscaling groups are found with that name. \"\"\" ec2 = boto3 . client ( \"ec2\" ) autoscaling = boto3 . client ( \"autoscaling\" ) autoscaler_info = AutoscalerInfo ( template = \"\" , instances = [], ) try : autoscaling_group = autoscaling . describe_auto_scaling_groups ( AutoScalingGroupNames = [ autoscaling_name ] )[ \"AutoScalingGroups\" ][ 0 ] try : autoscaler_info . template = autoscaling_group [ \"LaunchConfigurationName\" ] except KeyError : autoscaler_info . template = ( f ' { autoscaling_group [ \"LaunchTemplate\" ][ \"LaunchTemplateName\" ][: 35 ] } ' f ': { autoscaling_group [ \"LaunchTemplate\" ][ \"Version\" ] } ' ) except IndexError as error : raise AWSStateError ( f \"There are no autoscaling groups named { autoscaling_name } \" ) from error for instance_data in autoscaling_group [ \"Instances\" ]: ec2_data = ec2 . describe_instances ( InstanceIds = [ instance_data [ \"InstanceId\" ]] )[ \"Reservations\" ][ 0 ][ \"Instances\" ][ 0 ] try : instance_template = instance_data [ \"LaunchConfigurationName\" ][: 35 ] except KeyError : instance_template = ( f ' { instance_data [ \"LaunchTemplate\" ][ \"LaunchTemplateName\" ][: 35 ] } ' f ': { instance_data [ \"LaunchTemplate\" ][ \"Version\" ] } ' ) autoscaler_info . instances . append ( { \"Instance\" : instance_data [ \"InstanceId\" ], \"IP\" : ec2_data [ \"PrivateIpAddress\" ], \"Status\" : ( f \" { instance_data [ 'HealthStatus' ] } /\" f \" { instance_data [ 'LifecycleState' ] } \" ), \"Created\" : ec2_data [ \"LaunchTime\" ] . strftime ( \"%Y-%m- %d T%H:%M\" ), \"Template\" : instance_template , } ) return autoscaler_info check_configuration () staticmethod \u00b6 Check if the client is able to interact with the AWS server. Makes sure that the AWS is correctly configured. Exceptions: Type Description AWSConfigurationError if any of the checks fail. Source code in drode/adapters/aws.py @staticmethod def check_configuration () -> None : \"\"\"Check if the client is able to interact with the AWS server. Makes sure that the AWS is correctly configured. Raises: AWSConfigurationError: if any of the checks fail. \"\"\" try : ec2 = boto3 . client ( \"ec2\" ) ec2 . describe_regions () except ( NoRegionError , ClientError ) as error : log . error ( \"AWS: KO\" ) raise AWSConfigurationError ( error ) from error log . info ( \"AWS: OK\" ) get_autoscaling_group ( autoscaling_name ) staticmethod \u00b6 Get information of the autoscaling group and associated resources. Parameters: Name Type Description Default autoscaling_name str Autoscaling group name required Returns: Type Description autoscaler_info Dictionary with the following schema: 'template': srt = LaunchConfiguration or LaunchTemplate:LaunchTemplateVersion 'instances': List[InstanceInfo] = List of instance dictionaries with the following structure: 'Instance': str 'IP': str 'Status': str = Health status data in format 'f{HealthStatus}/{LifecycleState}' 'Created': str 'Template': str = LaunchConfiguration or LaunchTemplate:LaunchTemplateVersion that generated the instance. Exceptions: Type Description AWSStateError If no autoscaling groups are found with that name. Source code in drode/adapters/aws.py @staticmethod def get_autoscaling_group ( autoscaling_name : str ) -> AutoscalerInfo : \"\"\"Get information of the autoscaling group and associated resources. Args: autoscaling_name: Autoscaling group name Returns: autoscaler_info: Dictionary with the following schema: 'template': srt = LaunchConfiguration or LaunchTemplate:LaunchTemplateVersion 'instances': List[InstanceInfo] = List of instance dictionaries with the following structure: 'Instance': str 'IP': str 'Status': str = Health status data in format 'f{HealthStatus}/{LifecycleState}' 'Created': str 'Template': str = LaunchConfiguration or LaunchTemplate:LaunchTemplateVersion that generated the instance. Raises: AWSStateError: If no autoscaling groups are found with that name. \"\"\" ec2 = boto3 . client ( \"ec2\" ) autoscaling = boto3 . client ( \"autoscaling\" ) autoscaler_info = AutoscalerInfo ( template = \"\" , instances = [], ) try : autoscaling_group = autoscaling . describe_auto_scaling_groups ( AutoScalingGroupNames = [ autoscaling_name ] )[ \"AutoScalingGroups\" ][ 0 ] try : autoscaler_info . template = autoscaling_group [ \"LaunchConfigurationName\" ] except KeyError : autoscaler_info . template = ( f ' { autoscaling_group [ \"LaunchTemplate\" ][ \"LaunchTemplateName\" ][: 35 ] } ' f ': { autoscaling_group [ \"LaunchTemplate\" ][ \"Version\" ] } ' ) except IndexError as error : raise AWSStateError ( f \"There are no autoscaling groups named { autoscaling_name } \" ) from error for instance_data in autoscaling_group [ \"Instances\" ]: ec2_data = ec2 . describe_instances ( InstanceIds = [ instance_data [ \"InstanceId\" ]] )[ \"Reservations\" ][ 0 ][ \"Instances\" ][ 0 ] try : instance_template = instance_data [ \"LaunchConfigurationName\" ][: 35 ] except KeyError : instance_template = ( f ' { instance_data [ \"LaunchTemplate\" ][ \"LaunchTemplateName\" ][: 35 ] } ' f ': { instance_data [ \"LaunchTemplate\" ][ \"Version\" ] } ' ) autoscaler_info . instances . append ( { \"Instance\" : instance_data [ \"InstanceId\" ], \"IP\" : ec2_data [ \"PrivateIpAddress\" ], \"Status\" : ( f \" { instance_data [ 'HealthStatus' ] } /\" f \" { instance_data [ 'LifecycleState' ] } \" ), \"Created\" : ec2_data [ \"LaunchTime\" ] . strftime ( \"%Y-%m- %d T%H:%M\" ), \"Template\" : instance_template , } ) return autoscaler_info AWSConfigurationError ( Exception ) \u00b6 Exception to gather AWS client configuration errors. Source code in drode/adapters/aws.py class AWSConfigurationError ( Exception ): \"\"\"Exception to gather AWS client configuration errors.\"\"\" AWSStateError ( Exception ) \u00b6 Exception to gather AWS unexpected resource states. Source code in drode/adapters/aws.py class AWSStateError ( Exception ): \"\"\"Exception to gather AWS unexpected resource states.\"\"\" AutoscalerInfo dataclass \u00b6 Model the response of the AWS API regarding ASGs. Source code in drode/adapters/aws.py @dataclass class AutoscalerInfo : \"\"\"Model the response of the AWS API regarding ASGs.\"\"\" instances : List [ InstanceInfo ] template : str = \"\" drone \u00b6 Gather the integration with the Drone web application. BuildInfo dataclass \u00b6 Build information schema. Source code in drode/adapters/drone.py @dataclass # R0902: Too many attributes, but it's a model, so it doesn't mind class BuildInfo : # noqa: R0902 \"\"\"Build information schema.\"\"\" # VNE003: variables should not shadow builtins. As we're defining just the schema # of a dictionary we can safely ignore it. id : int # noqa: VNE003, C0103 status : str number : int trigger : str event : str message : str source : str after : str target : str deploy_to : str started : int finished : int parent : Optional [ int ] before : Optional [ str ] author_login : Optional [ str ] author_name : Optional [ str ] sender : Optional [ str ] stages : List [ Any ] Drone \u00b6 Drone adapter. Attributes: Name Type Description drone_url Drone API server base url. drone_token Drone token to interact with the API. Source code in drode/adapters/drone.py class Drone : \"\"\"Drone adapter. Attributes: drone_url: Drone API server base url. drone_token: Drone token to interact with the API. \"\"\" def __init__ ( self , drone_url : str , drone_token : str ) -> None : \"\"\"Configure the connection details.\"\"\" self . drone_url = drone_url self . drone_token = drone_token def check_configuration ( self ) -> None : \"\"\"Check if the client is able to interact with the server. Makes sure that an API call works as expected. Raises: DroneConfigurationError: if any of the checks fail. \"\"\" try : self . get ( f \" { self . drone_url } /api/user/repos\" ) except DroneAPIError as error : log . error ( \"Drone: KO\" ) raise DroneConfigurationError ( \"There was a problem contacting the Drone server. \\n\\n \" \" \\t Please make sure the DRONE_SERVER and DRONE_TOKEN \" \"environmental variables are set. \\n \" \" \\t https://docs.drone.io/cli/configure/\" ) from error log . info ( \"Drone: OK\" ) def build_info ( self , project_pipeline : str , build_number : int ) -> BuildInfo : \"\"\"Return the information of the build. Args: project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. build_number: Number of drone build. Returns: info: build information. \"\"\" try : build_data = self . get ( f \" { self . drone_url } /api/repos/ { project_pipeline } /builds/ { build_number } \" ) . json ()[ 0 ] return BuildInfo ( ** build_data ) except DroneAPIError as error : raise DroneBuildError ( f \"The build { build_number } was not found at \" f \"the pipeline { project_pipeline } \" ) from error def get ( self , url : str , method : str = \"get\" , max_retries : int = 5 ) -> requests . models . Response : \"\"\"Fetch the content of an url. It's a requests wrapper to handle errors and configuration. Args: url: URL to fetch. method: HTTP method, one of ['get', 'post'] Returns: response: Requests response Raises: DroneAPIError: If the drone API returns a response with status code != 200. \"\"\" retry = 0 while retry < max_retries : try : if method == \"post\" : response = requests . post ( url , headers = { \"Authorization\" : f \"Bearer { self . drone_token } \" }, ) else : response = requests . get ( url , headers = { \"Authorization\" : f \"Bearer { self . drone_token } \" }, ) if response . status_code == 200 : return response retry += 1 log . debug ( f \"There was an error fetching url { url } \" ) except requests . exceptions . RequestException : retry += 1 log . debug ( f \"There was an error fetching url { url } \" ) raise DroneAPIError ( f \" { response . status_code } error while trying to access { url } \" ) def last_build_info ( self , project_pipeline : str ) -> BuildInfo : \"\"\"Return the information of the last build. Args: project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. Returns: info: Last build information. \"\"\" build_data = self . get ( f \" { self . drone_url } /api/repos/ { project_pipeline } /builds\" ) . json ()[ 0 ] return BuildInfo ( ** build_data ) def last_success_build_info ( self , project_pipeline : str , branch : str = \"master\" ) -> BuildInfo : \"\"\"Return the information of the last successful build. Args: project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. branch: Branch to search the last build. Returns: info: last successful build number information. \"\"\" build_history = self . get ( f \" { self . drone_url } /api/repos/ { project_pipeline } /builds\" ) . json () for build_data in build_history : if ( build_data [ \"status\" ] == \"success\" and build_data [ \"target\" ] == branch and build_data [ \"event\" ] == \"push\" ): return BuildInfo ( ** build_data ) raise DroneBuildError ( f \"There are no successful jobs with target branch { branch } \" ) def promote ( self , project_pipeline : str , build_number : int , environment : str ) -> int : \"\"\"Promotes the build_number or commit id to the desired environment. Args: project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. build_number: Number of drone build or commit id. environment: Environment one of ['production', 'staging'] Returns: promote_build_number: Build number of the promote job. \"\"\" promote_url = ( f \" { self . drone_url } /api/repos/ { project_pipeline } /builds/ { build_number } /\" f \"promote?target= { environment } \" ) response = self . get ( promote_url , \"post\" ) . json () log . info ( f \"Job # { response [ 'number' ] } has started.\" ) return response [ \"number\" ] __init__ ( self , drone_url , drone_token ) special \u00b6 Configure the connection details. Source code in drode/adapters/drone.py def __init__ ( self , drone_url : str , drone_token : str ) -> None : \"\"\"Configure the connection details.\"\"\" self . drone_url = drone_url self . drone_token = drone_token build_info ( self , project_pipeline , build_number ) \u00b6 Return the information of the build. Parameters: Name Type Description Default project_pipeline str Drone pipeline identifier. In the format of repo_owner/repo_name . required build_number int Number of drone build. required Returns: Type Description info build information. Source code in drode/adapters/drone.py def build_info ( self , project_pipeline : str , build_number : int ) -> BuildInfo : \"\"\"Return the information of the build. Args: project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. build_number: Number of drone build. Returns: info: build information. \"\"\" try : build_data = self . get ( f \" { self . drone_url } /api/repos/ { project_pipeline } /builds/ { build_number } \" ) . json ()[ 0 ] return BuildInfo ( ** build_data ) except DroneAPIError as error : raise DroneBuildError ( f \"The build { build_number } was not found at \" f \"the pipeline { project_pipeline } \" ) from error check_configuration ( self ) \u00b6 Check if the client is able to interact with the server. Makes sure that an API call works as expected. Exceptions: Type Description DroneConfigurationError if any of the checks fail. Source code in drode/adapters/drone.py def check_configuration ( self ) -> None : \"\"\"Check if the client is able to interact with the server. Makes sure that an API call works as expected. Raises: DroneConfigurationError: if any of the checks fail. \"\"\" try : self . get ( f \" { self . drone_url } /api/user/repos\" ) except DroneAPIError as error : log . error ( \"Drone: KO\" ) raise DroneConfigurationError ( \"There was a problem contacting the Drone server. \\n\\n \" \" \\t Please make sure the DRONE_SERVER and DRONE_TOKEN \" \"environmental variables are set. \\n \" \" \\t https://docs.drone.io/cli/configure/\" ) from error log . info ( \"Drone: OK\" ) get ( self , url , method = 'get' , max_retries = 5 ) \u00b6 Fetch the content of an url. It's a requests wrapper to handle errors and configuration. Parameters: Name Type Description Default url str URL to fetch. required method str HTTP method, one of ['get', 'post'] 'get' Returns: Type Description response Requests response Exceptions: Type Description DroneAPIError If the drone API returns a response with status code != 200. Source code in drode/adapters/drone.py def get ( self , url : str , method : str = \"get\" , max_retries : int = 5 ) -> requests . models . Response : \"\"\"Fetch the content of an url. It's a requests wrapper to handle errors and configuration. Args: url: URL to fetch. method: HTTP method, one of ['get', 'post'] Returns: response: Requests response Raises: DroneAPIError: If the drone API returns a response with status code != 200. \"\"\" retry = 0 while retry < max_retries : try : if method == \"post\" : response = requests . post ( url , headers = { \"Authorization\" : f \"Bearer { self . drone_token } \" }, ) else : response = requests . get ( url , headers = { \"Authorization\" : f \"Bearer { self . drone_token } \" }, ) if response . status_code == 200 : return response retry += 1 log . debug ( f \"There was an error fetching url { url } \" ) except requests . exceptions . RequestException : retry += 1 log . debug ( f \"There was an error fetching url { url } \" ) raise DroneAPIError ( f \" { response . status_code } error while trying to access { url } \" ) last_build_info ( self , project_pipeline ) \u00b6 Return the information of the last build. Parameters: Name Type Description Default project_pipeline str Drone pipeline identifier. In the format of repo_owner/repo_name . required Returns: Type Description info Last build information. Source code in drode/adapters/drone.py def last_build_info ( self , project_pipeline : str ) -> BuildInfo : \"\"\"Return the information of the last build. Args: project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. Returns: info: Last build information. \"\"\" build_data = self . get ( f \" { self . drone_url } /api/repos/ { project_pipeline } /builds\" ) . json ()[ 0 ] return BuildInfo ( ** build_data ) last_success_build_info ( self , project_pipeline , branch = 'master' ) \u00b6 Return the information of the last successful build. Parameters: Name Type Description Default project_pipeline str Drone pipeline identifier. In the format of repo_owner/repo_name . required branch str Branch to search the last build. 'master' Returns: Type Description info last successful build number information. Source code in drode/adapters/drone.py def last_success_build_info ( self , project_pipeline : str , branch : str = \"master\" ) -> BuildInfo : \"\"\"Return the information of the last successful build. Args: project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. branch: Branch to search the last build. Returns: info: last successful build number information. \"\"\" build_history = self . get ( f \" { self . drone_url } /api/repos/ { project_pipeline } /builds\" ) . json () for build_data in build_history : if ( build_data [ \"status\" ] == \"success\" and build_data [ \"target\" ] == branch and build_data [ \"event\" ] == \"push\" ): return BuildInfo ( ** build_data ) raise DroneBuildError ( f \"There are no successful jobs with target branch { branch } \" ) promote ( self , project_pipeline , build_number , environment ) \u00b6 Promotes the build_number or commit id to the desired environment. Parameters: Name Type Description Default project_pipeline str Drone pipeline identifier. In the format of repo_owner/repo_name . required build_number int Number of drone build or commit id. required environment str Environment one of ['production', 'staging'] required Returns: Type Description promote_build_number Build number of the promote job. Source code in drode/adapters/drone.py def promote ( self , project_pipeline : str , build_number : int , environment : str ) -> int : \"\"\"Promotes the build_number or commit id to the desired environment. Args: project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. build_number: Number of drone build or commit id. environment: Environment one of ['production', 'staging'] Returns: promote_build_number: Build number of the promote job. \"\"\" promote_url = ( f \" { self . drone_url } /api/repos/ { project_pipeline } /builds/ { build_number } /\" f \"promote?target= { environment } \" ) response = self . get ( promote_url , \"post\" ) . json () log . info ( f \"Job # { response [ 'number' ] } has started.\" ) return response [ \"number\" ] DroneAPIError ( Exception ) \u00b6 Exception to gather drone API errors. Source code in drode/adapters/drone.py class DroneAPIError ( Exception ): \"\"\"Exception to gather drone API errors.\"\"\" DroneBuildError ( Exception ) \u00b6 Exception to gather drone pipeline build errors. Source code in drode/adapters/drone.py class DroneBuildError ( Exception ): \"\"\"Exception to gather drone pipeline build errors.\"\"\" DroneConfigurationError ( Exception ) \u00b6 Exception to gather drone client configuration errors. Source code in drode/adapters/drone.py class DroneConfigurationError ( Exception ): \"\"\"Exception to gather drone client configuration errors.\"\"\" DronePromoteError ( Exception ) \u00b6 Exception to gather job promotion errors. Source code in drode/adapters/drone.py class DronePromoteError ( Exception ): \"\"\"Exception to gather job promotion errors.\"\"\" config \u00b6 Define the configuration of the main program. Config ( UserDict ) \u00b6 Expose the configuration in a friendly way. Public methods: get: Fetch the configuration value of the specified key. load: Load the configuration from the configuration YAML file. save: Saves the configuration in the configuration YAML file. Attributes and properties: config_path (str): Path to the configuration file. data(dict): Program configuration. Source code in drode/config.py class Config ( UserDict ): # type: ignore # noqa: R0901 \"\"\"Expose the configuration in a friendly way. Public methods: get: Fetch the configuration value of the specified key. load: Load the configuration from the configuration YAML file. save: Saves the configuration in the configuration YAML file. Attributes and properties: config_path (str): Path to the configuration file. data(dict): Program configuration. \"\"\" def __init__ ( self , config_path : str = \"~/.local/share/drode/config.yaml\" , ) -> None : \"\"\"Configure the attributes and load the configuration.\"\"\" super () . __init__ () self . config_path = os . path . expanduser ( config_path ) self . load () def get ( # ANN401: default signature is not trivial, and this code will be deprecated, # so it's not worth it the time. self , key : str , default : Any = None , # noqa: ANN401 ) -> Union [ str , int , Dict [ str , Any ], List [ Any ]]: \"\"\"Fetch the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if the configuration contents are: self.data = { 'first': { 'second': 'value' }, } self.data.get('first.second') == 'value' \"\"\" original_key = key config_keys = key . split ( \".\" ) value = self . data . copy () for config_key in config_keys : try : value = value [ config_key ] except KeyError as error : if default is not None : return default raise ConfigError ( f \"Failed to fetch the configuration { config_key } \" f \"when searching for { original_key } \" ) from error return value def set ( self , key : str , value : Union [ str , int ]) -> None : \"\"\"Set the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if you want to set the configuration: self.data = { 'first': { 'second': 'value' }, } self.data.set('first.second', 'value') \"\"\" config_keys : List [ str ] = key . split ( \".\" ) last_key = config_keys . pop ( - 1 ) # Initialize the dictionary structure parent = self . data for config_key in config_keys : try : parent = parent [ config_key ] except KeyError : parent [ config_key ] = {} parent = parent [ config_key ] # Set value parent [ last_key ] = value def load ( self ) -> None : \"\"\"Load the configuration from the configuration YAML file.\"\"\" try : with open ( self . config_path , \"r\" , encoding = \"utf-8\" ) as file_cursor : try : self . data = YAML () . load ( file_cursor ) except ( ParserError , ScannerError ) as error : raise ConfigError ( str ( error )) from error except FileNotFoundError : log . warning ( \"The configuration file {self.config_path} could not be found.\" \" \\n Copying the default one.\" ) shutil . copy ( \"assets/config.yaml\" , self . config_path ) def save ( self ) -> None : \"\"\"Save the configuration in the configuration YAML file.\"\"\" with open ( self . config_path , \"w+\" , encoding = \"utf-8\" ) as file_cursor : yaml = YAML () yaml . default_flow_style = False yaml . dump ( self . data , file_cursor ) __init__ ( self , config_path = '~/.local/share/drode/config.yaml' ) special \u00b6 Configure the attributes and load the configuration. Source code in drode/config.py def __init__ ( self , config_path : str = \"~/.local/share/drode/config.yaml\" , ) -> None : \"\"\"Configure the attributes and load the configuration.\"\"\" super () . __init__ () self . config_path = os . path . expanduser ( config_path ) self . load () get ( self , key , default = None ) \u00b6 Fetch the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if the configuration contents are: self.data = { 'first': { 'second': 'value' }, } self.data.get('first.second') == 'value' Source code in drode/config.py def get ( # ANN401: default signature is not trivial, and this code will be deprecated, # so it's not worth it the time. self , key : str , default : Any = None , # noqa: ANN401 ) -> Union [ str , int , Dict [ str , Any ], List [ Any ]]: \"\"\"Fetch the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if the configuration contents are: self.data = { 'first': { 'second': 'value' }, } self.data.get('first.second') == 'value' \"\"\" original_key = key config_keys = key . split ( \".\" ) value = self . data . copy () for config_key in config_keys : try : value = value [ config_key ] except KeyError as error : if default is not None : return default raise ConfigError ( f \"Failed to fetch the configuration { config_key } \" f \"when searching for { original_key } \" ) from error return value load ( self ) \u00b6 Load the configuration from the configuration YAML file. Source code in drode/config.py def load ( self ) -> None : \"\"\"Load the configuration from the configuration YAML file.\"\"\" try : with open ( self . config_path , \"r\" , encoding = \"utf-8\" ) as file_cursor : try : self . data = YAML () . load ( file_cursor ) except ( ParserError , ScannerError ) as error : raise ConfigError ( str ( error )) from error except FileNotFoundError : log . warning ( \"The configuration file {self.config_path} could not be found.\" \" \\n Copying the default one.\" ) shutil . copy ( \"assets/config.yaml\" , self . config_path ) save ( self ) \u00b6 Save the configuration in the configuration YAML file. Source code in drode/config.py def save ( self ) -> None : \"\"\"Save the configuration in the configuration YAML file.\"\"\" with open ( self . config_path , \"w+\" , encoding = \"utf-8\" ) as file_cursor : yaml = YAML () yaml . default_flow_style = False yaml . dump ( self . data , file_cursor ) set ( self , key , value ) \u00b6 Set the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if you want to set the configuration: self.data = { 'first': { 'second': 'value' }, } self.data.set('first.second', 'value') Source code in drode/config.py def set ( self , key : str , value : Union [ str , int ]) -> None : \"\"\"Set the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if you want to set the configuration: self.data = { 'first': { 'second': 'value' }, } self.data.set('first.second', 'value') \"\"\" config_keys : List [ str ] = key . split ( \".\" ) last_key = config_keys . pop ( - 1 ) # Initialize the dictionary structure parent = self . data for config_key in config_keys : try : parent = parent [ config_key ] except KeyError : parent [ config_key ] = {} parent = parent [ config_key ] # Set value parent [ last_key ] = value ConfigError ( Exception ) \u00b6 Catch configuration errors. Source code in drode/config.py class ConfigError ( Exception ): \"\"\"Catch configuration errors.\"\"\" entrypoints special \u00b6 Define the different ways to expose the program functionality. Functions load_logger: Configure the Logging logger. load_aws () \u00b6 Configure the AWS adapter. Source code in drode/entrypoints/__init__.py def load_aws () -> AWS : \"\"\"Configure the AWS adapter.\"\"\" return AWS () load_config ( config_path ) \u00b6 Configure the Config object. Source code in drode/entrypoints/__init__.py def load_config ( config_path : str ) -> Config : \"\"\"Configure the Config object.\"\"\" try : return Config ( config_path ) except ConfigError as error : log . error ( str ( error )) sys . exit ( 1 ) load_drone () \u00b6 Configure the Drone adapter. Source code in drode/entrypoints/__init__.py def load_drone () -> Drone : \"\"\"Configure the Drone adapter.\"\"\" try : drone_url = os . environ [ \"DRONE_SERVER\" ] drone_token = os . environ [ \"DRONE_TOKEN\" ] except KeyError : log . error ( \"Please set the DRONE_SERVER and DRONE_TOKEN environmental variables\" ) sys . exit ( 1 ) return Drone ( drone_url , drone_token ) load_logger ( verbose = False ) \u00b6 Configure the Logging logger. Parameters: Name Type Description Default verbose bool Set the logging level to Debug. False Source code in drode/entrypoints/__init__.py def load_logger ( verbose : bool = False ) -> None : # pragma no cover \"\"\"Configure the Logging logger. Args: verbose: Set the logging level to Debug. \"\"\" logging . addLevelName ( logging . INFO , \"[ \\033 [36m+ \\033 [0m]\" ) logging . addLevelName ( logging . ERROR , \"[ \\033 [31m+ \\033 [0m]\" ) logging . addLevelName ( logging . DEBUG , \"[ \\033 [32m+ \\033 [0m]\" ) logging . addLevelName ( logging . WARNING , \"[ \\033 [33m+ \\033 [0m]\" ) if verbose : logging . basicConfig ( stream = sys . stderr , level = logging . DEBUG , format = \" %(levelname)s %(message)s \" ) else : logging . getLogger ( \"botocore\" ) . setLevel ( logging . WARNING ) logging . basicConfig ( stream = sys . stderr , level = logging . INFO , format = \" %(levelname)s %(message)s \" ) cli \u00b6 Command line interface definition. services \u00b6 Define all the orchestration functionality required by the program to work. Classes and functions that connect the different domain model objects with the adapters and handlers to achieve the program's purpose. ask ( question ) \u00b6 Prompt the user to answer yes or no to a question. Returns: Type Description answer User's answer Source code in drode/services.py def ask ( question : str ) -> bool : \"\"\"Prompt the user to answer yes or no to a question. Returns: answer: User's answer \"\"\" answer = input ( question ) if answer in [ \"yes\" , \"y\" ]: return True return False get_active_project ( config ) \u00b6 Return the active project id. Returns: Type Description project_id Active project id Exceptions: Type Description ConfigError If there are no active projects, no configured projects or the active project doesn't exist. Source code in drode/services.py def get_active_project ( config : Config ) -> str : \"\"\"Return the active project id. Returns: project_id: Active project id Raises: ConfigError: If there are no active projects, no configured projects or the active project doesn't exist. \"\"\" try : if config [ \"active_project\" ] is None : raise KeyError ( \"There are no active projects.\" ) _check_project ( config , config [ \"active_project\" ]) return config [ \"active_project\" ] except KeyError as error : try : if len ( config [ \"projects\" ] . keys ()) == 1 : return [ key for key , value in config [ \"projects\" ] . items ()][ 0 ] raise ConfigError ( \"There are more than one project configured but none \" \"is marked as active. Please use drode set command to \" \"define one.\" ) from error except ( KeyError , AttributeError ): raise ConfigError ( \"There are no projects configured.\" ) from error project_status ( config , aws ) \u00b6 Fetch the status of the autoscaling groups of the active project. Exceptions: Type Description ConfigError If there are no active projects, no configured projects or the active project doesn't exist. Source code in drode/services.py def project_status ( config : Config , aws : AWS ) -> ProjectStatus : \"\"\"Fetch the status of the autoscaling groups of the active project. Raises: ConfigError: If there are no active projects, no configured projects or the active project doesn't exist. \"\"\" project : ProjectStatus = {} active_project = get_active_project ( config ) for environment in [ \"Production\" , \"Staging\" ]: try : autoscaler_name = config . get ( f \"projects. { active_project } .\" f \"aws.autoscaling_groups. { environment . lower () } \" ) if not isinstance ( autoscaler_name , str ): raise ConfigError ( \"The autoscaler name is not a string\" ) autoscaler_info = aws . get_autoscaling_group ( autoscaler_name ) except ConfigError : autoscaler_info = AutoscalerInfo ( instances = []) project [ environment ] = autoscaler_info return project promote ( drone , project_pipeline , environment , build_number = None ) \u00b6 Promote build_number or commit id to the desired environment. Parameters: Name Type Description Default drone Drone Drone adapter. required build_number Optional[int] Number of drone build or commit id. None project_pipeline str Drone pipeline identifier. In the format of repo_owner/repo_name . required environment str Environment one of ['production', 'staging'] required Returns: Type Description build_number Job that promotes the desired build number. Exceptions: Type Description DroneAPIError if the returned build information contains an after that is not a string. Source code in drode/services.py def promote ( drone : Drone , project_pipeline : str , environment : str , build_number : Optional [ int ] = None , ) -> Optional [ int ]: \"\"\"Promote build_number or commit id to the desired environment. Args: drone: Drone adapter. build_number: Number of drone build or commit id. project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. environment: Environment one of ['production', 'staging'] Returns: build_number: Job that promotes the desired build number. Raises: DroneAPIError: if the returned build information contains an after that is not a string. \"\"\" if build_number is None : build = drone . last_success_build_info ( project_pipeline ) else : build = drone . build_info ( project_pipeline , build_number ) if build . status != \"success\" : raise DronePromoteError ( f \"You can't promote job # { build . number } to { environment } \" f \"as it's status is { build . status } \" ) log . info ( f \"You're about to promote job # { build . number } \" f \"of the pipeline { project_pipeline } to { environment } \\n\\n \" f \" With commit { build . after [: 8 ] } : { build . message } \" ) if ask ( \"Are you sure? [y/N]: \" ): return drone . promote ( project_pipeline , build . number , environment ) return None set_active_project ( config , project_id ) \u00b6 Set the active project. Exceptions: Type Description ConfigError If the project to activate doesn't exist. Source code in drode/services.py def set_active_project ( config : Config , project_id : str ) -> None : \"\"\"Set the active project. Raises: ConfigError: If the project to activate doesn't exist. \"\"\" _check_project ( config , project_id ) config [ \"active_project\" ] = project_id config . save () log . info ( f \"The project { project_id } is now active\" ) wait ( drone , project_pipeline , build_number = None ) \u00b6 Wait for the pipeline build to finish. Parameters: Name Type Description Default project_pipeline str Drone pipeline identifier. In the format of repo_owner/repo_name . required build_number Optional[int] Number of drone build. None Returns: Type Description True When job has finished. Exceptions: Type Description DroneBuildError if the job doesn't exist DroneAPIError if the API returns a job with a \"number\" that is not an int. Source code in drode/services.py def wait ( drone : Drone , project_pipeline : str , build_number : Optional [ int ] = None ) -> bool : \"\"\"Wait for the pipeline build to finish. Args: project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. build_number: Number of drone build. Returns: True: When job has finished. Raises: DroneBuildError: if the job doesn't exist DroneAPIError: if the API returns a job with a \"number\" that is not an int. \"\"\" if build_number is None : last_build = drone . last_build_info ( project_pipeline ) if last_build . finished != 0 : log . info ( \"There are no active jobs\" ) return True build_number = last_build . number first_time = True while True : build = drone . build_info ( project_pipeline , build_number ) if build . finished == 0 : if first_time : log . info ( f \"Waiting for job # { build . number } started by \" f \"a { build . event } event by { build . trigger } .\" ) first_time = False time . sleep ( 1 ) continue log . info ( f \"Job # { build . number } has finished with status { build . status } \" ) return True version \u00b6 Utilities to retrieve the information of the program version. version_info () \u00b6 Display the version of the program, python and the platform. Source code in drode/version.py def version_info () -> str : \"\"\"Display the version of the program, python and the platform.\"\"\" return dedent ( f \"\"\" \\ ------------------------------------------------------------------ drode: { __version__ } Python: { sys . version . split ( \" \" , maxsplit = 1 )[ 0 ] } Platform: { platform . platform () } ------------------------------------------------------------------\"\"\" ) views \u00b6 Define the representations of the data. print_autoscaling_group_info ( autoscaler_info ) \u00b6 Print the information of the autoscaler information in table format. Source code in drode/views.py def print_autoscaling_group_info ( autoscaler_info : AutoscalerInfo ) -> None : \"\"\"Print the information of the autoscaler information in table format.\"\"\" print ( f \"Active Template: { autoscaler_info . template } \" ) print ( tabulate . tabulate ( autoscaler_info . instances , headers = \"keys\" , tablefmt = \"simple\" ) ) print_status ( project_status ) \u00b6 Print the project environment status. Source code in drode/views.py def print_status ( project_status : ProjectStatus ) -> None : \"\"\"Print the project environment status.\"\"\" for environment , autoscaler_info in project_status . items (): if len ( autoscaler_info . instances ) == 0 : continue print ( f \"# { environment } \" ) print_autoscaling_group_info ( autoscaler_info ) print ()","title":"Reference"},{"location":"reference/#drode","text":"Wrapper over the Drone and AWS APIs to make deployments more user friendly.","title":"drode"},{"location":"reference/#drode.adapters","text":"Expose the different adapters.","title":"adapters"},{"location":"reference/#drode.adapters.aws","text":"Gather the integration with the AWS boto library.","title":"aws"},{"location":"reference/#drode.adapters.aws.AWS","text":"AWS adapter. Source code in drode/adapters/aws.py class AWS : \"\"\"AWS adapter.\"\"\" @staticmethod def check_configuration () -> None : \"\"\"Check if the client is able to interact with the AWS server. Makes sure that the AWS is correctly configured. Raises: AWSConfigurationError: if any of the checks fail. \"\"\" try : ec2 = boto3 . client ( \"ec2\" ) ec2 . describe_regions () except ( NoRegionError , ClientError ) as error : log . error ( \"AWS: KO\" ) raise AWSConfigurationError ( error ) from error log . info ( \"AWS: OK\" ) @staticmethod def get_autoscaling_group ( autoscaling_name : str ) -> AutoscalerInfo : \"\"\"Get information of the autoscaling group and associated resources. Args: autoscaling_name: Autoscaling group name Returns: autoscaler_info: Dictionary with the following schema: 'template': srt = LaunchConfiguration or LaunchTemplate:LaunchTemplateVersion 'instances': List[InstanceInfo] = List of instance dictionaries with the following structure: 'Instance': str 'IP': str 'Status': str = Health status data in format 'f{HealthStatus}/{LifecycleState}' 'Created': str 'Template': str = LaunchConfiguration or LaunchTemplate:LaunchTemplateVersion that generated the instance. Raises: AWSStateError: If no autoscaling groups are found with that name. \"\"\" ec2 = boto3 . client ( \"ec2\" ) autoscaling = boto3 . client ( \"autoscaling\" ) autoscaler_info = AutoscalerInfo ( template = \"\" , instances = [], ) try : autoscaling_group = autoscaling . describe_auto_scaling_groups ( AutoScalingGroupNames = [ autoscaling_name ] )[ \"AutoScalingGroups\" ][ 0 ] try : autoscaler_info . template = autoscaling_group [ \"LaunchConfigurationName\" ] except KeyError : autoscaler_info . template = ( f ' { autoscaling_group [ \"LaunchTemplate\" ][ \"LaunchTemplateName\" ][: 35 ] } ' f ': { autoscaling_group [ \"LaunchTemplate\" ][ \"Version\" ] } ' ) except IndexError as error : raise AWSStateError ( f \"There are no autoscaling groups named { autoscaling_name } \" ) from error for instance_data in autoscaling_group [ \"Instances\" ]: ec2_data = ec2 . describe_instances ( InstanceIds = [ instance_data [ \"InstanceId\" ]] )[ \"Reservations\" ][ 0 ][ \"Instances\" ][ 0 ] try : instance_template = instance_data [ \"LaunchConfigurationName\" ][: 35 ] except KeyError : instance_template = ( f ' { instance_data [ \"LaunchTemplate\" ][ \"LaunchTemplateName\" ][: 35 ] } ' f ': { instance_data [ \"LaunchTemplate\" ][ \"Version\" ] } ' ) autoscaler_info . instances . append ( { \"Instance\" : instance_data [ \"InstanceId\" ], \"IP\" : ec2_data [ \"PrivateIpAddress\" ], \"Status\" : ( f \" { instance_data [ 'HealthStatus' ] } /\" f \" { instance_data [ 'LifecycleState' ] } \" ), \"Created\" : ec2_data [ \"LaunchTime\" ] . strftime ( \"%Y-%m- %d T%H:%M\" ), \"Template\" : instance_template , } ) return autoscaler_info","title":"AWS"},{"location":"reference/#drode.adapters.aws.AWS.check_configuration","text":"Check if the client is able to interact with the AWS server. Makes sure that the AWS is correctly configured. Exceptions: Type Description AWSConfigurationError if any of the checks fail. Source code in drode/adapters/aws.py @staticmethod def check_configuration () -> None : \"\"\"Check if the client is able to interact with the AWS server. Makes sure that the AWS is correctly configured. Raises: AWSConfigurationError: if any of the checks fail. \"\"\" try : ec2 = boto3 . client ( \"ec2\" ) ec2 . describe_regions () except ( NoRegionError , ClientError ) as error : log . error ( \"AWS: KO\" ) raise AWSConfigurationError ( error ) from error log . info ( \"AWS: OK\" )","title":"check_configuration()"},{"location":"reference/#drode.adapters.aws.AWS.get_autoscaling_group","text":"Get information of the autoscaling group and associated resources. Parameters: Name Type Description Default autoscaling_name str Autoscaling group name required Returns: Type Description autoscaler_info Dictionary with the following schema: 'template': srt = LaunchConfiguration or LaunchTemplate:LaunchTemplateVersion 'instances': List[InstanceInfo] = List of instance dictionaries with the following structure: 'Instance': str 'IP': str 'Status': str = Health status data in format 'f{HealthStatus}/{LifecycleState}' 'Created': str 'Template': str = LaunchConfiguration or LaunchTemplate:LaunchTemplateVersion that generated the instance. Exceptions: Type Description AWSStateError If no autoscaling groups are found with that name. Source code in drode/adapters/aws.py @staticmethod def get_autoscaling_group ( autoscaling_name : str ) -> AutoscalerInfo : \"\"\"Get information of the autoscaling group and associated resources. Args: autoscaling_name: Autoscaling group name Returns: autoscaler_info: Dictionary with the following schema: 'template': srt = LaunchConfiguration or LaunchTemplate:LaunchTemplateVersion 'instances': List[InstanceInfo] = List of instance dictionaries with the following structure: 'Instance': str 'IP': str 'Status': str = Health status data in format 'f{HealthStatus}/{LifecycleState}' 'Created': str 'Template': str = LaunchConfiguration or LaunchTemplate:LaunchTemplateVersion that generated the instance. Raises: AWSStateError: If no autoscaling groups are found with that name. \"\"\" ec2 = boto3 . client ( \"ec2\" ) autoscaling = boto3 . client ( \"autoscaling\" ) autoscaler_info = AutoscalerInfo ( template = \"\" , instances = [], ) try : autoscaling_group = autoscaling . describe_auto_scaling_groups ( AutoScalingGroupNames = [ autoscaling_name ] )[ \"AutoScalingGroups\" ][ 0 ] try : autoscaler_info . template = autoscaling_group [ \"LaunchConfigurationName\" ] except KeyError : autoscaler_info . template = ( f ' { autoscaling_group [ \"LaunchTemplate\" ][ \"LaunchTemplateName\" ][: 35 ] } ' f ': { autoscaling_group [ \"LaunchTemplate\" ][ \"Version\" ] } ' ) except IndexError as error : raise AWSStateError ( f \"There are no autoscaling groups named { autoscaling_name } \" ) from error for instance_data in autoscaling_group [ \"Instances\" ]: ec2_data = ec2 . describe_instances ( InstanceIds = [ instance_data [ \"InstanceId\" ]] )[ \"Reservations\" ][ 0 ][ \"Instances\" ][ 0 ] try : instance_template = instance_data [ \"LaunchConfigurationName\" ][: 35 ] except KeyError : instance_template = ( f ' { instance_data [ \"LaunchTemplate\" ][ \"LaunchTemplateName\" ][: 35 ] } ' f ': { instance_data [ \"LaunchTemplate\" ][ \"Version\" ] } ' ) autoscaler_info . instances . append ( { \"Instance\" : instance_data [ \"InstanceId\" ], \"IP\" : ec2_data [ \"PrivateIpAddress\" ], \"Status\" : ( f \" { instance_data [ 'HealthStatus' ] } /\" f \" { instance_data [ 'LifecycleState' ] } \" ), \"Created\" : ec2_data [ \"LaunchTime\" ] . strftime ( \"%Y-%m- %d T%H:%M\" ), \"Template\" : instance_template , } ) return autoscaler_info","title":"get_autoscaling_group()"},{"location":"reference/#drode.adapters.aws.AWSConfigurationError","text":"Exception to gather AWS client configuration errors. Source code in drode/adapters/aws.py class AWSConfigurationError ( Exception ): \"\"\"Exception to gather AWS client configuration errors.\"\"\"","title":"AWSConfigurationError"},{"location":"reference/#drode.adapters.aws.AWSStateError","text":"Exception to gather AWS unexpected resource states. Source code in drode/adapters/aws.py class AWSStateError ( Exception ): \"\"\"Exception to gather AWS unexpected resource states.\"\"\"","title":"AWSStateError"},{"location":"reference/#drode.adapters.aws.AutoscalerInfo","text":"Model the response of the AWS API regarding ASGs. Source code in drode/adapters/aws.py @dataclass class AutoscalerInfo : \"\"\"Model the response of the AWS API regarding ASGs.\"\"\" instances : List [ InstanceInfo ] template : str = \"\"","title":"AutoscalerInfo"},{"location":"reference/#drode.adapters.drone","text":"Gather the integration with the Drone web application.","title":"drone"},{"location":"reference/#drode.adapters.drone.BuildInfo","text":"Build information schema. Source code in drode/adapters/drone.py @dataclass # R0902: Too many attributes, but it's a model, so it doesn't mind class BuildInfo : # noqa: R0902 \"\"\"Build information schema.\"\"\" # VNE003: variables should not shadow builtins. As we're defining just the schema # of a dictionary we can safely ignore it. id : int # noqa: VNE003, C0103 status : str number : int trigger : str event : str message : str source : str after : str target : str deploy_to : str started : int finished : int parent : Optional [ int ] before : Optional [ str ] author_login : Optional [ str ] author_name : Optional [ str ] sender : Optional [ str ] stages : List [ Any ]","title":"BuildInfo"},{"location":"reference/#drode.adapters.drone.Drone","text":"Drone adapter. Attributes: Name Type Description drone_url Drone API server base url. drone_token Drone token to interact with the API. Source code in drode/adapters/drone.py class Drone : \"\"\"Drone adapter. Attributes: drone_url: Drone API server base url. drone_token: Drone token to interact with the API. \"\"\" def __init__ ( self , drone_url : str , drone_token : str ) -> None : \"\"\"Configure the connection details.\"\"\" self . drone_url = drone_url self . drone_token = drone_token def check_configuration ( self ) -> None : \"\"\"Check if the client is able to interact with the server. Makes sure that an API call works as expected. Raises: DroneConfigurationError: if any of the checks fail. \"\"\" try : self . get ( f \" { self . drone_url } /api/user/repos\" ) except DroneAPIError as error : log . error ( \"Drone: KO\" ) raise DroneConfigurationError ( \"There was a problem contacting the Drone server. \\n\\n \" \" \\t Please make sure the DRONE_SERVER and DRONE_TOKEN \" \"environmental variables are set. \\n \" \" \\t https://docs.drone.io/cli/configure/\" ) from error log . info ( \"Drone: OK\" ) def build_info ( self , project_pipeline : str , build_number : int ) -> BuildInfo : \"\"\"Return the information of the build. Args: project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. build_number: Number of drone build. Returns: info: build information. \"\"\" try : build_data = self . get ( f \" { self . drone_url } /api/repos/ { project_pipeline } /builds/ { build_number } \" ) . json ()[ 0 ] return BuildInfo ( ** build_data ) except DroneAPIError as error : raise DroneBuildError ( f \"The build { build_number } was not found at \" f \"the pipeline { project_pipeline } \" ) from error def get ( self , url : str , method : str = \"get\" , max_retries : int = 5 ) -> requests . models . Response : \"\"\"Fetch the content of an url. It's a requests wrapper to handle errors and configuration. Args: url: URL to fetch. method: HTTP method, one of ['get', 'post'] Returns: response: Requests response Raises: DroneAPIError: If the drone API returns a response with status code != 200. \"\"\" retry = 0 while retry < max_retries : try : if method == \"post\" : response = requests . post ( url , headers = { \"Authorization\" : f \"Bearer { self . drone_token } \" }, ) else : response = requests . get ( url , headers = { \"Authorization\" : f \"Bearer { self . drone_token } \" }, ) if response . status_code == 200 : return response retry += 1 log . debug ( f \"There was an error fetching url { url } \" ) except requests . exceptions . RequestException : retry += 1 log . debug ( f \"There was an error fetching url { url } \" ) raise DroneAPIError ( f \" { response . status_code } error while trying to access { url } \" ) def last_build_info ( self , project_pipeline : str ) -> BuildInfo : \"\"\"Return the information of the last build. Args: project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. Returns: info: Last build information. \"\"\" build_data = self . get ( f \" { self . drone_url } /api/repos/ { project_pipeline } /builds\" ) . json ()[ 0 ] return BuildInfo ( ** build_data ) def last_success_build_info ( self , project_pipeline : str , branch : str = \"master\" ) -> BuildInfo : \"\"\"Return the information of the last successful build. Args: project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. branch: Branch to search the last build. Returns: info: last successful build number information. \"\"\" build_history = self . get ( f \" { self . drone_url } /api/repos/ { project_pipeline } /builds\" ) . json () for build_data in build_history : if ( build_data [ \"status\" ] == \"success\" and build_data [ \"target\" ] == branch and build_data [ \"event\" ] == \"push\" ): return BuildInfo ( ** build_data ) raise DroneBuildError ( f \"There are no successful jobs with target branch { branch } \" ) def promote ( self , project_pipeline : str , build_number : int , environment : str ) -> int : \"\"\"Promotes the build_number or commit id to the desired environment. Args: project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. build_number: Number of drone build or commit id. environment: Environment one of ['production', 'staging'] Returns: promote_build_number: Build number of the promote job. \"\"\" promote_url = ( f \" { self . drone_url } /api/repos/ { project_pipeline } /builds/ { build_number } /\" f \"promote?target= { environment } \" ) response = self . get ( promote_url , \"post\" ) . json () log . info ( f \"Job # { response [ 'number' ] } has started.\" ) return response [ \"number\" ]","title":"Drone"},{"location":"reference/#drode.adapters.drone.Drone.__init__","text":"Configure the connection details. Source code in drode/adapters/drone.py def __init__ ( self , drone_url : str , drone_token : str ) -> None : \"\"\"Configure the connection details.\"\"\" self . drone_url = drone_url self . drone_token = drone_token","title":"__init__()"},{"location":"reference/#drode.adapters.drone.Drone.build_info","text":"Return the information of the build. Parameters: Name Type Description Default project_pipeline str Drone pipeline identifier. In the format of repo_owner/repo_name . required build_number int Number of drone build. required Returns: Type Description info build information. Source code in drode/adapters/drone.py def build_info ( self , project_pipeline : str , build_number : int ) -> BuildInfo : \"\"\"Return the information of the build. Args: project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. build_number: Number of drone build. Returns: info: build information. \"\"\" try : build_data = self . get ( f \" { self . drone_url } /api/repos/ { project_pipeline } /builds/ { build_number } \" ) . json ()[ 0 ] return BuildInfo ( ** build_data ) except DroneAPIError as error : raise DroneBuildError ( f \"The build { build_number } was not found at \" f \"the pipeline { project_pipeline } \" ) from error","title":"build_info()"},{"location":"reference/#drode.adapters.drone.Drone.check_configuration","text":"Check if the client is able to interact with the server. Makes sure that an API call works as expected. Exceptions: Type Description DroneConfigurationError if any of the checks fail. Source code in drode/adapters/drone.py def check_configuration ( self ) -> None : \"\"\"Check if the client is able to interact with the server. Makes sure that an API call works as expected. Raises: DroneConfigurationError: if any of the checks fail. \"\"\" try : self . get ( f \" { self . drone_url } /api/user/repos\" ) except DroneAPIError as error : log . error ( \"Drone: KO\" ) raise DroneConfigurationError ( \"There was a problem contacting the Drone server. \\n\\n \" \" \\t Please make sure the DRONE_SERVER and DRONE_TOKEN \" \"environmental variables are set. \\n \" \" \\t https://docs.drone.io/cli/configure/\" ) from error log . info ( \"Drone: OK\" )","title":"check_configuration()"},{"location":"reference/#drode.adapters.drone.Drone.get","text":"Fetch the content of an url. It's a requests wrapper to handle errors and configuration. Parameters: Name Type Description Default url str URL to fetch. required method str HTTP method, one of ['get', 'post'] 'get' Returns: Type Description response Requests response Exceptions: Type Description DroneAPIError If the drone API returns a response with status code != 200. Source code in drode/adapters/drone.py def get ( self , url : str , method : str = \"get\" , max_retries : int = 5 ) -> requests . models . Response : \"\"\"Fetch the content of an url. It's a requests wrapper to handle errors and configuration. Args: url: URL to fetch. method: HTTP method, one of ['get', 'post'] Returns: response: Requests response Raises: DroneAPIError: If the drone API returns a response with status code != 200. \"\"\" retry = 0 while retry < max_retries : try : if method == \"post\" : response = requests . post ( url , headers = { \"Authorization\" : f \"Bearer { self . drone_token } \" }, ) else : response = requests . get ( url , headers = { \"Authorization\" : f \"Bearer { self . drone_token } \" }, ) if response . status_code == 200 : return response retry += 1 log . debug ( f \"There was an error fetching url { url } \" ) except requests . exceptions . RequestException : retry += 1 log . debug ( f \"There was an error fetching url { url } \" ) raise DroneAPIError ( f \" { response . status_code } error while trying to access { url } \" )","title":"get()"},{"location":"reference/#drode.adapters.drone.Drone.last_build_info","text":"Return the information of the last build. Parameters: Name Type Description Default project_pipeline str Drone pipeline identifier. In the format of repo_owner/repo_name . required Returns: Type Description info Last build information. Source code in drode/adapters/drone.py def last_build_info ( self , project_pipeline : str ) -> BuildInfo : \"\"\"Return the information of the last build. Args: project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. Returns: info: Last build information. \"\"\" build_data = self . get ( f \" { self . drone_url } /api/repos/ { project_pipeline } /builds\" ) . json ()[ 0 ] return BuildInfo ( ** build_data )","title":"last_build_info()"},{"location":"reference/#drode.adapters.drone.Drone.last_success_build_info","text":"Return the information of the last successful build. Parameters: Name Type Description Default project_pipeline str Drone pipeline identifier. In the format of repo_owner/repo_name . required branch str Branch to search the last build. 'master' Returns: Type Description info last successful build number information. Source code in drode/adapters/drone.py def last_success_build_info ( self , project_pipeline : str , branch : str = \"master\" ) -> BuildInfo : \"\"\"Return the information of the last successful build. Args: project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. branch: Branch to search the last build. Returns: info: last successful build number information. \"\"\" build_history = self . get ( f \" { self . drone_url } /api/repos/ { project_pipeline } /builds\" ) . json () for build_data in build_history : if ( build_data [ \"status\" ] == \"success\" and build_data [ \"target\" ] == branch and build_data [ \"event\" ] == \"push\" ): return BuildInfo ( ** build_data ) raise DroneBuildError ( f \"There are no successful jobs with target branch { branch } \" )","title":"last_success_build_info()"},{"location":"reference/#drode.adapters.drone.Drone.promote","text":"Promotes the build_number or commit id to the desired environment. Parameters: Name Type Description Default project_pipeline str Drone pipeline identifier. In the format of repo_owner/repo_name . required build_number int Number of drone build or commit id. required environment str Environment one of ['production', 'staging'] required Returns: Type Description promote_build_number Build number of the promote job. Source code in drode/adapters/drone.py def promote ( self , project_pipeline : str , build_number : int , environment : str ) -> int : \"\"\"Promotes the build_number or commit id to the desired environment. Args: project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. build_number: Number of drone build or commit id. environment: Environment one of ['production', 'staging'] Returns: promote_build_number: Build number of the promote job. \"\"\" promote_url = ( f \" { self . drone_url } /api/repos/ { project_pipeline } /builds/ { build_number } /\" f \"promote?target= { environment } \" ) response = self . get ( promote_url , \"post\" ) . json () log . info ( f \"Job # { response [ 'number' ] } has started.\" ) return response [ \"number\" ]","title":"promote()"},{"location":"reference/#drode.adapters.drone.DroneAPIError","text":"Exception to gather drone API errors. Source code in drode/adapters/drone.py class DroneAPIError ( Exception ): \"\"\"Exception to gather drone API errors.\"\"\"","title":"DroneAPIError"},{"location":"reference/#drode.adapters.drone.DroneBuildError","text":"Exception to gather drone pipeline build errors. Source code in drode/adapters/drone.py class DroneBuildError ( Exception ): \"\"\"Exception to gather drone pipeline build errors.\"\"\"","title":"DroneBuildError"},{"location":"reference/#drode.adapters.drone.DroneConfigurationError","text":"Exception to gather drone client configuration errors. Source code in drode/adapters/drone.py class DroneConfigurationError ( Exception ): \"\"\"Exception to gather drone client configuration errors.\"\"\"","title":"DroneConfigurationError"},{"location":"reference/#drode.adapters.drone.DronePromoteError","text":"Exception to gather job promotion errors. Source code in drode/adapters/drone.py class DronePromoteError ( Exception ): \"\"\"Exception to gather job promotion errors.\"\"\"","title":"DronePromoteError"},{"location":"reference/#drode.config","text":"Define the configuration of the main program.","title":"config"},{"location":"reference/#drode.config.Config","text":"Expose the configuration in a friendly way. Public methods: get: Fetch the configuration value of the specified key. load: Load the configuration from the configuration YAML file. save: Saves the configuration in the configuration YAML file. Attributes and properties: config_path (str): Path to the configuration file. data(dict): Program configuration. Source code in drode/config.py class Config ( UserDict ): # type: ignore # noqa: R0901 \"\"\"Expose the configuration in a friendly way. Public methods: get: Fetch the configuration value of the specified key. load: Load the configuration from the configuration YAML file. save: Saves the configuration in the configuration YAML file. Attributes and properties: config_path (str): Path to the configuration file. data(dict): Program configuration. \"\"\" def __init__ ( self , config_path : str = \"~/.local/share/drode/config.yaml\" , ) -> None : \"\"\"Configure the attributes and load the configuration.\"\"\" super () . __init__ () self . config_path = os . path . expanduser ( config_path ) self . load () def get ( # ANN401: default signature is not trivial, and this code will be deprecated, # so it's not worth it the time. self , key : str , default : Any = None , # noqa: ANN401 ) -> Union [ str , int , Dict [ str , Any ], List [ Any ]]: \"\"\"Fetch the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if the configuration contents are: self.data = { 'first': { 'second': 'value' }, } self.data.get('first.second') == 'value' \"\"\" original_key = key config_keys = key . split ( \".\" ) value = self . data . copy () for config_key in config_keys : try : value = value [ config_key ] except KeyError as error : if default is not None : return default raise ConfigError ( f \"Failed to fetch the configuration { config_key } \" f \"when searching for { original_key } \" ) from error return value def set ( self , key : str , value : Union [ str , int ]) -> None : \"\"\"Set the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if you want to set the configuration: self.data = { 'first': { 'second': 'value' }, } self.data.set('first.second', 'value') \"\"\" config_keys : List [ str ] = key . split ( \".\" ) last_key = config_keys . pop ( - 1 ) # Initialize the dictionary structure parent = self . data for config_key in config_keys : try : parent = parent [ config_key ] except KeyError : parent [ config_key ] = {} parent = parent [ config_key ] # Set value parent [ last_key ] = value def load ( self ) -> None : \"\"\"Load the configuration from the configuration YAML file.\"\"\" try : with open ( self . config_path , \"r\" , encoding = \"utf-8\" ) as file_cursor : try : self . data = YAML () . load ( file_cursor ) except ( ParserError , ScannerError ) as error : raise ConfigError ( str ( error )) from error except FileNotFoundError : log . warning ( \"The configuration file {self.config_path} could not be found.\" \" \\n Copying the default one.\" ) shutil . copy ( \"assets/config.yaml\" , self . config_path ) def save ( self ) -> None : \"\"\"Save the configuration in the configuration YAML file.\"\"\" with open ( self . config_path , \"w+\" , encoding = \"utf-8\" ) as file_cursor : yaml = YAML () yaml . default_flow_style = False yaml . dump ( self . data , file_cursor )","title":"Config"},{"location":"reference/#drode.config.Config.__init__","text":"Configure the attributes and load the configuration. Source code in drode/config.py def __init__ ( self , config_path : str = \"~/.local/share/drode/config.yaml\" , ) -> None : \"\"\"Configure the attributes and load the configuration.\"\"\" super () . __init__ () self . config_path = os . path . expanduser ( config_path ) self . load ()","title":"__init__()"},{"location":"reference/#drode.config.Config.get","text":"Fetch the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if the configuration contents are: self.data = { 'first': { 'second': 'value' }, } self.data.get('first.second') == 'value' Source code in drode/config.py def get ( # ANN401: default signature is not trivial, and this code will be deprecated, # so it's not worth it the time. self , key : str , default : Any = None , # noqa: ANN401 ) -> Union [ str , int , Dict [ str , Any ], List [ Any ]]: \"\"\"Fetch the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if the configuration contents are: self.data = { 'first': { 'second': 'value' }, } self.data.get('first.second') == 'value' \"\"\" original_key = key config_keys = key . split ( \".\" ) value = self . data . copy () for config_key in config_keys : try : value = value [ config_key ] except KeyError as error : if default is not None : return default raise ConfigError ( f \"Failed to fetch the configuration { config_key } \" f \"when searching for { original_key } \" ) from error return value","title":"get()"},{"location":"reference/#drode.config.Config.load","text":"Load the configuration from the configuration YAML file. Source code in drode/config.py def load ( self ) -> None : \"\"\"Load the configuration from the configuration YAML file.\"\"\" try : with open ( self . config_path , \"r\" , encoding = \"utf-8\" ) as file_cursor : try : self . data = YAML () . load ( file_cursor ) except ( ParserError , ScannerError ) as error : raise ConfigError ( str ( error )) from error except FileNotFoundError : log . warning ( \"The configuration file {self.config_path} could not be found.\" \" \\n Copying the default one.\" ) shutil . copy ( \"assets/config.yaml\" , self . config_path )","title":"load()"},{"location":"reference/#drode.config.Config.save","text":"Save the configuration in the configuration YAML file. Source code in drode/config.py def save ( self ) -> None : \"\"\"Save the configuration in the configuration YAML file.\"\"\" with open ( self . config_path , \"w+\" , encoding = \"utf-8\" ) as file_cursor : yaml = YAML () yaml . default_flow_style = False yaml . dump ( self . data , file_cursor )","title":"save()"},{"location":"reference/#drode.config.Config.set","text":"Set the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if you want to set the configuration: self.data = { 'first': { 'second': 'value' }, } self.data.set('first.second', 'value') Source code in drode/config.py def set ( self , key : str , value : Union [ str , int ]) -> None : \"\"\"Set the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if you want to set the configuration: self.data = { 'first': { 'second': 'value' }, } self.data.set('first.second', 'value') \"\"\" config_keys : List [ str ] = key . split ( \".\" ) last_key = config_keys . pop ( - 1 ) # Initialize the dictionary structure parent = self . data for config_key in config_keys : try : parent = parent [ config_key ] except KeyError : parent [ config_key ] = {} parent = parent [ config_key ] # Set value parent [ last_key ] = value","title":"set()"},{"location":"reference/#drode.config.ConfigError","text":"Catch configuration errors. Source code in drode/config.py class ConfigError ( Exception ): \"\"\"Catch configuration errors.\"\"\"","title":"ConfigError"},{"location":"reference/#drode.entrypoints","text":"Define the different ways to expose the program functionality. Functions load_logger: Configure the Logging logger.","title":"entrypoints"},{"location":"reference/#drode.entrypoints.load_aws","text":"Configure the AWS adapter. Source code in drode/entrypoints/__init__.py def load_aws () -> AWS : \"\"\"Configure the AWS adapter.\"\"\" return AWS ()","title":"load_aws()"},{"location":"reference/#drode.entrypoints.load_config","text":"Configure the Config object. Source code in drode/entrypoints/__init__.py def load_config ( config_path : str ) -> Config : \"\"\"Configure the Config object.\"\"\" try : return Config ( config_path ) except ConfigError as error : log . error ( str ( error )) sys . exit ( 1 )","title":"load_config()"},{"location":"reference/#drode.entrypoints.load_drone","text":"Configure the Drone adapter. Source code in drode/entrypoints/__init__.py def load_drone () -> Drone : \"\"\"Configure the Drone adapter.\"\"\" try : drone_url = os . environ [ \"DRONE_SERVER\" ] drone_token = os . environ [ \"DRONE_TOKEN\" ] except KeyError : log . error ( \"Please set the DRONE_SERVER and DRONE_TOKEN environmental variables\" ) sys . exit ( 1 ) return Drone ( drone_url , drone_token )","title":"load_drone()"},{"location":"reference/#drode.entrypoints.load_logger","text":"Configure the Logging logger. Parameters: Name Type Description Default verbose bool Set the logging level to Debug. False Source code in drode/entrypoints/__init__.py def load_logger ( verbose : bool = False ) -> None : # pragma no cover \"\"\"Configure the Logging logger. Args: verbose: Set the logging level to Debug. \"\"\" logging . addLevelName ( logging . INFO , \"[ \\033 [36m+ \\033 [0m]\" ) logging . addLevelName ( logging . ERROR , \"[ \\033 [31m+ \\033 [0m]\" ) logging . addLevelName ( logging . DEBUG , \"[ \\033 [32m+ \\033 [0m]\" ) logging . addLevelName ( logging . WARNING , \"[ \\033 [33m+ \\033 [0m]\" ) if verbose : logging . basicConfig ( stream = sys . stderr , level = logging . DEBUG , format = \" %(levelname)s %(message)s \" ) else : logging . getLogger ( \"botocore\" ) . setLevel ( logging . WARNING ) logging . basicConfig ( stream = sys . stderr , level = logging . INFO , format = \" %(levelname)s %(message)s \" )","title":"load_logger()"},{"location":"reference/#drode.entrypoints.cli","text":"Command line interface definition.","title":"cli"},{"location":"reference/#drode.services","text":"Define all the orchestration functionality required by the program to work. Classes and functions that connect the different domain model objects with the adapters and handlers to achieve the program's purpose.","title":"services"},{"location":"reference/#drode.services.ask","text":"Prompt the user to answer yes or no to a question. Returns: Type Description answer User's answer Source code in drode/services.py def ask ( question : str ) -> bool : \"\"\"Prompt the user to answer yes or no to a question. Returns: answer: User's answer \"\"\" answer = input ( question ) if answer in [ \"yes\" , \"y\" ]: return True return False","title":"ask()"},{"location":"reference/#drode.services.get_active_project","text":"Return the active project id. Returns: Type Description project_id Active project id Exceptions: Type Description ConfigError If there are no active projects, no configured projects or the active project doesn't exist. Source code in drode/services.py def get_active_project ( config : Config ) -> str : \"\"\"Return the active project id. Returns: project_id: Active project id Raises: ConfigError: If there are no active projects, no configured projects or the active project doesn't exist. \"\"\" try : if config [ \"active_project\" ] is None : raise KeyError ( \"There are no active projects.\" ) _check_project ( config , config [ \"active_project\" ]) return config [ \"active_project\" ] except KeyError as error : try : if len ( config [ \"projects\" ] . keys ()) == 1 : return [ key for key , value in config [ \"projects\" ] . items ()][ 0 ] raise ConfigError ( \"There are more than one project configured but none \" \"is marked as active. Please use drode set command to \" \"define one.\" ) from error except ( KeyError , AttributeError ): raise ConfigError ( \"There are no projects configured.\" ) from error","title":"get_active_project()"},{"location":"reference/#drode.services.project_status","text":"Fetch the status of the autoscaling groups of the active project. Exceptions: Type Description ConfigError If there are no active projects, no configured projects or the active project doesn't exist. Source code in drode/services.py def project_status ( config : Config , aws : AWS ) -> ProjectStatus : \"\"\"Fetch the status of the autoscaling groups of the active project. Raises: ConfigError: If there are no active projects, no configured projects or the active project doesn't exist. \"\"\" project : ProjectStatus = {} active_project = get_active_project ( config ) for environment in [ \"Production\" , \"Staging\" ]: try : autoscaler_name = config . get ( f \"projects. { active_project } .\" f \"aws.autoscaling_groups. { environment . lower () } \" ) if not isinstance ( autoscaler_name , str ): raise ConfigError ( \"The autoscaler name is not a string\" ) autoscaler_info = aws . get_autoscaling_group ( autoscaler_name ) except ConfigError : autoscaler_info = AutoscalerInfo ( instances = []) project [ environment ] = autoscaler_info return project","title":"project_status()"},{"location":"reference/#drode.services.promote","text":"Promote build_number or commit id to the desired environment. Parameters: Name Type Description Default drone Drone Drone adapter. required build_number Optional[int] Number of drone build or commit id. None project_pipeline str Drone pipeline identifier. In the format of repo_owner/repo_name . required environment str Environment one of ['production', 'staging'] required Returns: Type Description build_number Job that promotes the desired build number. Exceptions: Type Description DroneAPIError if the returned build information contains an after that is not a string. Source code in drode/services.py def promote ( drone : Drone , project_pipeline : str , environment : str , build_number : Optional [ int ] = None , ) -> Optional [ int ]: \"\"\"Promote build_number or commit id to the desired environment. Args: drone: Drone adapter. build_number: Number of drone build or commit id. project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. environment: Environment one of ['production', 'staging'] Returns: build_number: Job that promotes the desired build number. Raises: DroneAPIError: if the returned build information contains an after that is not a string. \"\"\" if build_number is None : build = drone . last_success_build_info ( project_pipeline ) else : build = drone . build_info ( project_pipeline , build_number ) if build . status != \"success\" : raise DronePromoteError ( f \"You can't promote job # { build . number } to { environment } \" f \"as it's status is { build . status } \" ) log . info ( f \"You're about to promote job # { build . number } \" f \"of the pipeline { project_pipeline } to { environment } \\n\\n \" f \" With commit { build . after [: 8 ] } : { build . message } \" ) if ask ( \"Are you sure? [y/N]: \" ): return drone . promote ( project_pipeline , build . number , environment ) return None","title":"promote()"},{"location":"reference/#drode.services.set_active_project","text":"Set the active project. Exceptions: Type Description ConfigError If the project to activate doesn't exist. Source code in drode/services.py def set_active_project ( config : Config , project_id : str ) -> None : \"\"\"Set the active project. Raises: ConfigError: If the project to activate doesn't exist. \"\"\" _check_project ( config , project_id ) config [ \"active_project\" ] = project_id config . save () log . info ( f \"The project { project_id } is now active\" )","title":"set_active_project()"},{"location":"reference/#drode.services.wait","text":"Wait for the pipeline build to finish. Parameters: Name Type Description Default project_pipeline str Drone pipeline identifier. In the format of repo_owner/repo_name . required build_number Optional[int] Number of drone build. None Returns: Type Description True When job has finished. Exceptions: Type Description DroneBuildError if the job doesn't exist DroneAPIError if the API returns a job with a \"number\" that is not an int. Source code in drode/services.py def wait ( drone : Drone , project_pipeline : str , build_number : Optional [ int ] = None ) -> bool : \"\"\"Wait for the pipeline build to finish. Args: project_pipeline: Drone pipeline identifier. In the format of `repo_owner/repo_name`. build_number: Number of drone build. Returns: True: When job has finished. Raises: DroneBuildError: if the job doesn't exist DroneAPIError: if the API returns a job with a \"number\" that is not an int. \"\"\" if build_number is None : last_build = drone . last_build_info ( project_pipeline ) if last_build . finished != 0 : log . info ( \"There are no active jobs\" ) return True build_number = last_build . number first_time = True while True : build = drone . build_info ( project_pipeline , build_number ) if build . finished == 0 : if first_time : log . info ( f \"Waiting for job # { build . number } started by \" f \"a { build . event } event by { build . trigger } .\" ) first_time = False time . sleep ( 1 ) continue log . info ( f \"Job # { build . number } has finished with status { build . status } \" ) return True","title":"wait()"},{"location":"reference/#drode.version","text":"Utilities to retrieve the information of the program version.","title":"version"},{"location":"reference/#drode.version.version_info","text":"Display the version of the program, python and the platform. Source code in drode/version.py def version_info () -> str : \"\"\"Display the version of the program, python and the platform.\"\"\" return dedent ( f \"\"\" \\ ------------------------------------------------------------------ drode: { __version__ } Python: { sys . version . split ( \" \" , maxsplit = 1 )[ 0 ] } Platform: { platform . platform () } ------------------------------------------------------------------\"\"\" )","title":"version_info()"},{"location":"reference/#drode.views","text":"Define the representations of the data.","title":"views"},{"location":"reference/#drode.views.print_autoscaling_group_info","text":"Print the information of the autoscaler information in table format. Source code in drode/views.py def print_autoscaling_group_info ( autoscaler_info : AutoscalerInfo ) -> None : \"\"\"Print the information of the autoscaler information in table format.\"\"\" print ( f \"Active Template: { autoscaler_info . template } \" ) print ( tabulate . tabulate ( autoscaler_info . instances , headers = \"keys\" , tablefmt = \"simple\" ) )","title":"print_autoscaling_group_info()"},{"location":"reference/#drode.views.print_status","text":"Print the project environment status. Source code in drode/views.py def print_status ( project_status : ProjectStatus ) -> None : \"\"\"Print the project environment status.\"\"\" for environment , autoscaler_info in project_status . items (): if len ( autoscaler_info . instances ) == 0 : continue print ( f \"# { environment } \" ) print_autoscaling_group_info ( autoscaler_info ) print ()","title":"print_status()"},{"location":"adr/001-high_level_problem_analysis/","text":"","title":"001 high level problem analysis"},{"location":"adr/002-initial_program_design/","text":"","title":"002 initial program design"},{"location":"adr/adr/","text":"ADR are short text documents that captures an important architectural decision made along with its context and consequences. graph TD 001[001: High level analysis] 002[002: Initial Program design] 001 -- Extended --> 002 click 001 \"https://lyz-code.github.io/drode/adr/001-high_level_problem_analysis\" _blank click 002 \"https://lyz-code.github.io/drode/adr/002-initial_program_design\" _blank 001:::draft 002:::draft classDef draft fill:#CDBFEA; classDef proposed fill:#B1CCE8; classDef accepted fill:#B1E8BA; classDef rejected fill:#E8B1B1; classDef deprecated fill:#E8B1B1; classDef superseeded fill:#E8E5B1;","title":"Adr"}]}