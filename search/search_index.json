{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"drode is a wrapper over the Drone and AWS APIs to make deployments more user friendly. It assumes that the projects are configured to continuous deliver all commits to staging. Then those commits can be promoted to production or to staging for upgrades and rollbacks. It has the following features: Prevent failed jobs to be promoted to production. Promote jobs with less arguments than the drone command line. Wait for a drone build to end, then raise the terminal bell. Installing \u00b6 To install drode , simply: pip install drode drode configuration is done through the yaml file located at ~/.local/share/drode/config.yaml . The default template is provided at installation time. It is assumed that Drone environmental variables DRONE_SERVER and DRONE_TOKEN are configured as well as the AWS CLI credentials. Please refer to their documentation in case of doubt. To check if everything works as expected use drode verify : $: drode verify [ INFO ] Drode: 0 .1.0 [ INFO ] Drone: OK [ INFO ] AWS: OK A simple example \u00b6 Let's see drode in action. Imagine a push in main triggers a drone job. Drone jobs can take from seconds to dozens of minutes. Keeping a constant eye on the job status introduces several undesired context changes. You can use the wait subcommand to release your mind of that burden. It will periodically check the job status and rise the terminal bell once it's finished. You can specify a job number, It monitors the last job by default, but you can specify any job number. $: drode wait [ INFO ] Waiting for job #213 started by a promote event by lyz. # (... some time ...) [ INFO ] Job #213 has finished with status success Once the push job has finished successfully, we can promote it to the production environment. $: drode promote [ INFO ] You ' re about to promote job #213 of the project drode_website to production [ INFO ] With commit 347579b: Add drode promote documentation Are you sure? [ y/n ] : y [ INFO ] Job #214 has started. drode promote promotes to production the last successful job originated by a push event in main . You are given the information of the job and are prompted if you want to continue. Only y or yes will complete the deployment. Optionally you can specify which job number to deploy in which environment with something like drode promote 210 staging . With the -w flag, drode promote will launch the job and then wait for it to finish. If you try to promote a failed job, you'll get the following error: [ ERROR ] You can 't promote job #200 to production as it' s status is failure drode is also able to give insights of the instances related to a project. If you've configured the aws section of the project configuration, it will be shown after executing the status subcommand. $: drode status # Production Active LaunchConfiguration: production-project_1-238-32gosdkon3hlglkshonbllsdk32023950lskenbl Instance IP Status Created LaunchConfiguration ------------------- ----------- ----------------- ---------------- ----------------------------------- i-gasklk3bnl23880sl 192 .71.1.42 Healthy/InService 2020 -06-09T04:02 production-project_1-238-32gosdkon3h i-2osdkgh3nbbbl0sk3 192 .83.3.86 Healthy/InService 2020 -06-09T04:03 production-project_1-238-32gosdkon3h # Staging Active LaunchConfiguration: staging-icijweb-240-237e9e9fb759bab18cc52ad5b7c407e9975831d3 Instance IP Status Created LaunchConfiguration ------------------- ------------ ----------------- ---------------- ----------------------------------- i-32okgadslk3jos03l 192 .21.2.158 Healthy/InService 2020 -06-09T18:50 staging-project_1-238-32gosdkon3h Multiple projects support \u00b6 If you have more than one project configured, drode needs to know which one to act upon. Instead of defining it through command flags, we use the set command. drode set project_1 To check the active project use drode active . References \u00b6 As most open sourced programs, drode is standing on the shoulders of giants, namely: Pytest Testing framework, enhanced by the awesome pytest-cases library that made the parametrization of the tests a lovely experience. Mypy Python static type checker. Flakeheaven Python linter with lots of checks . Black Python formatter to keep a nice style without effort. Autoimport Python formatter to automatically fix wrong import statements. isort Python formatter to order the import statements. PDM Command line tool to manage the dependencies. Mkdocs To build this documentation site, with the Material theme . Safety To check the installed dependencies for known security vulnerabilities. Bandit To finds common security issues in Python code. Yamlfix YAML fixer. Contributing \u00b6 For guidance on setting up a development environment, and how to make a contribution to drode , see Contributing to drode .","title":"Drode"},{"location":"#installing","text":"To install drode , simply: pip install drode drode configuration is done through the yaml file located at ~/.local/share/drode/config.yaml . The default template is provided at installation time. It is assumed that Drone environmental variables DRONE_SERVER and DRONE_TOKEN are configured as well as the AWS CLI credentials. Please refer to their documentation in case of doubt. To check if everything works as expected use drode verify : $: drode verify [ INFO ] Drode: 0 .1.0 [ INFO ] Drone: OK [ INFO ] AWS: OK","title":"Installing"},{"location":"#a-simple-example","text":"Let's see drode in action. Imagine a push in main triggers a drone job. Drone jobs can take from seconds to dozens of minutes. Keeping a constant eye on the job status introduces several undesired context changes. You can use the wait subcommand to release your mind of that burden. It will periodically check the job status and rise the terminal bell once it's finished. You can specify a job number, It monitors the last job by default, but you can specify any job number. $: drode wait [ INFO ] Waiting for job #213 started by a promote event by lyz. # (... some time ...) [ INFO ] Job #213 has finished with status success Once the push job has finished successfully, we can promote it to the production environment. $: drode promote [ INFO ] You ' re about to promote job #213 of the project drode_website to production [ INFO ] With commit 347579b: Add drode promote documentation Are you sure? [ y/n ] : y [ INFO ] Job #214 has started. drode promote promotes to production the last successful job originated by a push event in main . You are given the information of the job and are prompted if you want to continue. Only y or yes will complete the deployment. Optionally you can specify which job number to deploy in which environment with something like drode promote 210 staging . With the -w flag, drode promote will launch the job and then wait for it to finish. If you try to promote a failed job, you'll get the following error: [ ERROR ] You can 't promote job #200 to production as it' s status is failure drode is also able to give insights of the instances related to a project. If you've configured the aws section of the project configuration, it will be shown after executing the status subcommand. $: drode status # Production Active LaunchConfiguration: production-project_1-238-32gosdkon3hlglkshonbllsdk32023950lskenbl Instance IP Status Created LaunchConfiguration ------------------- ----------- ----------------- ---------------- ----------------------------------- i-gasklk3bnl23880sl 192 .71.1.42 Healthy/InService 2020 -06-09T04:02 production-project_1-238-32gosdkon3h i-2osdkgh3nbbbl0sk3 192 .83.3.86 Healthy/InService 2020 -06-09T04:03 production-project_1-238-32gosdkon3h # Staging Active LaunchConfiguration: staging-icijweb-240-237e9e9fb759bab18cc52ad5b7c407e9975831d3 Instance IP Status Created LaunchConfiguration ------------------- ------------ ----------------- ---------------- ----------------------------------- i-32okgadslk3jos03l 192 .21.2.158 Healthy/InService 2020 -06-09T18:50 staging-project_1-238-32gosdkon3h","title":"A simple example"},{"location":"#multiple-projects-support","text":"If you have more than one project configured, drode needs to know which one to act upon. Instead of defining it through command flags, we use the set command. drode set project_1 To check the active project use drode active .","title":"Multiple projects support"},{"location":"#references","text":"As most open sourced programs, drode is standing on the shoulders of giants, namely: Pytest Testing framework, enhanced by the awesome pytest-cases library that made the parametrization of the tests a lovely experience. Mypy Python static type checker. Flakeheaven Python linter with lots of checks . Black Python formatter to keep a nice style without effort. Autoimport Python formatter to automatically fix wrong import statements. isort Python formatter to order the import statements. PDM Command line tool to manage the dependencies. Mkdocs To build this documentation site, with the Material theme . Safety To check the installed dependencies for known security vulnerabilities. Bandit To finds common security issues in Python code. Yamlfix YAML fixer.","title":"References"},{"location":"#contributing","text":"For guidance on setting up a development environment, and how to make a contribution to drode , see Contributing to drode .","title":"Contributing"},{"location":"contributing/","text":"So you've started using drode and want to show your gratitude to the project, depending on your programming skills there are different ways to do so. I don't know how to program \u00b6 There are several ways you can contribute: Open an issue if you encounter any bug or to let us know if you want a new feature to be implemented. Spread the word about the program. Review the documentation and try to improve it. I know how to program in Python \u00b6 If you have some python knowledge there are some additional ways to contribute. We've ordered the issues in milestones , check the issues in the smaller one, as it's where we'll be spending most of our efforts. Try the good first issues , as they are expected to be easier to get into the project. We develop the program with TDD , so we expect any contribution to have it's associated tests. We also try to maintain an updated documentation of the project, so think if your contribution needs to update it. We know that the expected code quality is above average. Therefore it might be changeling to get the initial grasp of the project structure, know how to make the tests, update the documentation or use all the project technology stack. but please don't let this fact discourage you from contributing: If you want to develop a new feature, explain how you'd like to do it in the related issue. If you don't know how to test your code, do the pull request without the tests and we'll try to do them for you. Issues \u00b6 Questions, feature requests and bug reports are all welcome as issues. To report a security vulnerability, please see our security policy instead. To make it as simple as possible for us to help you, please include the output of the following call in your issue: python -c \"import drode.version; print(drode.version.version_info())\" or if you have make installed, you can use make version . Please try to always include the above unless you're unable to install drode or know it's not relevant to your question or feature request. Pull Requests \u00b6 drode is released regularly so you should see your improvements release in a matter of days or weeks. Note Unless your change is trivial (typo, docs tweak etc.), please create an issue to discuss the change before creating a pull request. If you're looking for something to get your teeth into, check out the \"help wanted\" label on github. Development facilities \u00b6 To make contributing as easy and fast as possible, you'll want to run tests and linting locally. tl;dr : use make format to fix formatting, make to run tests and linting & make docs to build the docs. You'll need to have python 3.6, 3.7, or 3.8, virtualenv, git, and make installed. Clone your fork and go into the repository directory: git clone git@github.com:<your username>/drode.git cd drode Set up the virtualenv for running tests: virtualenv -p ` which python3.7 ` env source env/bin/activate Install drode, dependencies and configure the pre-commits: make install Checkout a new branch and make your changes: git checkout -b my-new-feature-branch Fix formatting and imports: drode uses black to enforce formatting and isort to fix imports. make format Run tests and linting: make There are more sub-commands in Makefile like test-code , test-examples , mypy or security which you might want to use, but generally make should be all you need. If you need to pass specific arguments to pytest use the ARGS variable, for example make test ARGs='-k test_markdownlint_passes' . Build documentation: If you have changed the documentation, make sure it builds the static site. Once built it will serve the documentation at localhost:8000 : make docs Commit, push, and create your pull request. Make a new release: To generate the changelog of the new changes, build the package, upload to pypi and clean the build files use make bump . We'd love you to contribute to drode !","title":"Contributing"},{"location":"contributing/#i-dont-know-how-to-program","text":"There are several ways you can contribute: Open an issue if you encounter any bug or to let us know if you want a new feature to be implemented. Spread the word about the program. Review the documentation and try to improve it.","title":"I don't know how to program"},{"location":"contributing/#i-know-how-to-program-in-python","text":"If you have some python knowledge there are some additional ways to contribute. We've ordered the issues in milestones , check the issues in the smaller one, as it's where we'll be spending most of our efforts. Try the good first issues , as they are expected to be easier to get into the project. We develop the program with TDD , so we expect any contribution to have it's associated tests. We also try to maintain an updated documentation of the project, so think if your contribution needs to update it. We know that the expected code quality is above average. Therefore it might be changeling to get the initial grasp of the project structure, know how to make the tests, update the documentation or use all the project technology stack. but please don't let this fact discourage you from contributing: If you want to develop a new feature, explain how you'd like to do it in the related issue. If you don't know how to test your code, do the pull request without the tests and we'll try to do them for you.","title":"I know how to program in Python"},{"location":"contributing/#issues","text":"Questions, feature requests and bug reports are all welcome as issues. To report a security vulnerability, please see our security policy instead. To make it as simple as possible for us to help you, please include the output of the following call in your issue: python -c \"import drode.version; print(drode.version.version_info())\" or if you have make installed, you can use make version . Please try to always include the above unless you're unable to install drode or know it's not relevant to your question or feature request.","title":"Issues"},{"location":"contributing/#pull-requests","text":"drode is released regularly so you should see your improvements release in a matter of days or weeks. Note Unless your change is trivial (typo, docs tweak etc.), please create an issue to discuss the change before creating a pull request. If you're looking for something to get your teeth into, check out the \"help wanted\" label on github.","title":"Pull Requests"},{"location":"contributing/#development-facilities","text":"To make contributing as easy and fast as possible, you'll want to run tests and linting locally. tl;dr : use make format to fix formatting, make to run tests and linting & make docs to build the docs. You'll need to have python 3.6, 3.7, or 3.8, virtualenv, git, and make installed. Clone your fork and go into the repository directory: git clone git@github.com:<your username>/drode.git cd drode Set up the virtualenv for running tests: virtualenv -p ` which python3.7 ` env source env/bin/activate Install drode, dependencies and configure the pre-commits: make install Checkout a new branch and make your changes: git checkout -b my-new-feature-branch Fix formatting and imports: drode uses black to enforce formatting and isort to fix imports. make format Run tests and linting: make There are more sub-commands in Makefile like test-code , test-examples , mypy or security which you might want to use, but generally make should be all you need. If you need to pass specific arguments to pytest use the ARGS variable, for example make test ARGs='-k test_markdownlint_passes' . Build documentation: If you have changed the documentation, make sure it builds the static site. Once built it will serve the documentation at localhost:8000 : make docs Commit, push, and create your pull request. Make a new release: To generate the changelog of the new changes, build the package, upload to pypi and clean the build files use make bump . We'd love you to contribute to drode !","title":"Development facilities"},{"location":"reference/","text":"drode \u00b6 Wrapper over the Drone and AWS APIs to make deployments more user friendly.","title":"Reference"},{"location":"reference/#drode","text":"Wrapper over the Drone and AWS APIs to make deployments more user friendly.","title":"drode"},{"location":"adr/001-high_level_problem_analysis/","text":"","title":"001 high level problem analysis"},{"location":"adr/002-initial_program_design/","text":"","title":"002 initial program design"},{"location":"adr/adr/","text":"ADR are short text documents that captures an important architectural decision made along with its context and consequences. graph TD 001[001: High level analysis] 002[002: Initial Program design] 001 -- Extended --> 002 click 001 \"https://lyz-code.github.io/drode/adr/001-high_level_problem_analysis\" _blank click 002 \"https://lyz-code.github.io/drode/adr/002-initial_program_design\" _blank 001:::draft 002:::draft classDef draft fill:#CDBFEA; classDef proposed fill:#B1CCE8; classDef accepted fill:#B1E8BA; classDef rejected fill:#E8B1B1; classDef deprecated fill:#E8B1B1; classDef superseeded fill:#E8E5B1;","title":"Adr"}]}